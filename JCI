#!/usr/bin/env python3
from Required import *
from sys import argv
        
JCI = Interpreter()
if len(argv) > 1:
    with open (argv[1],'r') as f:
        lexer = Lexer(f.read())
        tokens,errs = lexer.Tokenize()
        if len(errs.show()) != 0:
            print(errs.getLast())
        else:
            
            parser = Parser(tokens)


            Set = []
            for token in tokens:
                if token.type == "ENDTOKEN":
                    stack.append(Set)
                    Set = []                                        
                # elif token.type == "VarOp":
                #     Set.append(token)
                #     if token.operation == "setVal":
                #         variable = Variable()
                #         if type(token.value) == str:
                #             val = token.value
                #             type_ = token.value
                #         else :
                #             type_ = token.value.type
                #             val = token.value.value
                #             Set.pop()
                #         variable.setAttr("type",type_)
                #         variable.setAttr("name",token.name)
                #         variable.setAttr("value",val)
                #         variables[token.name.value] = variable
                else:
                    Set.append(token)
            for Set in stack:
                print("processing stack elem =>",Set)
                action = None
                concerned = None
                n = 0
                for elem in Set :
                    print("processing elem ",elem)
                    if action !=  None:

                        parser = Parser(Set[n:])
                        ast,pos = parser.Parse()
                        # Set = Set[pos.idx-1:]
                        if action  == "setVal":
                            value = JCI.visit(ast)
                            concerned.value = value
                            print(value)
                            variable = Variable()
                            variable.setAttr("type",concerned.value.type)
                            variable.setAttr("name",concerned.name.value)
                            variable.setAttr("value",concerned.value.value)
                            variables[concerned.name] = variable
                        # print(concerned)
                        # print(elem)
                        # print(n)
                        break
                    else:
                        if type(elem) == VarOp:
                            action = elem.operation
                            concerned = elem
                        print(elem.type)
                    n+=1
            stack = []
            # print(tok
else:
    Shell = shell(JCI)
    Shell['start']()